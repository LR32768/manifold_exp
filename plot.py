import numpy as np
import matplotlib.pyplot as plt

A = np.array([[1,1], [2,1], [3,1], [4,1], [5,1], [6,1], [7,1]])
P = np.linalg.pinv(A)

ntk_2d_loss = np.array([  0.06317,  0.01904,  0.00718,  0.00207,  0.00087,  0.00055,  0.00028] )
k1 = (P @ np.log(ntk_2d_loss))[0]; print(k1)
ntk_4d_loss = np.array([  0.14798,  0.10201,  0.06414,  0.03736,  0.02056,  0.01298,  0.00574])
k2 = (P @ np.log(ntk_4d_loss))[0]; print(k2)
ntk_5d_loss = np.array([  0.15315, 0.12107, 0.08128,  0.05199,  0.03664,  0.02062,  0.01238])
k3 = (P @ np.log(ntk_5d_loss))[0]; print(k3)
ntk_10d_loss = np.array([ 0.19752,  0.15899,  0.12999,  0.08825,  0.07263,  0.05235,  0.03806] )
k4 = (P @ np.log(ntk_10d_loss))[0]; print(k4)
ntk_20d_loss = np.array([ 0.20952,  0.17076,  0.14013,  0.1213,   0.08625,  0.06983,  0.05399])
k5 = (P @ np.log(ntk_20d_loss))[0]; print(k5)

sample = np.array([10, 20, 40, 80, 160, 320, 640])
x = np.arange(7)
plt.xticks(x, sample)
plt.plot(x, np.log(ntk_2d_loss), label='NTK 2d manifold')
plt.annotate("Slope: %.2f" % k1, xy=(x[-1], np.log(ntk_2d_loss[-1])), xytext=(x[-1]+0.1, np.log(ntk_2d_loss[-1])+0.1))
plt.plot(x, np.log(ntk_4d_loss), label='NTK 4d manifold')
plt.annotate("Slope: %.2f" % k2, xy=(x[-1], np.log(ntk_4d_loss[-1])), xytext=(x[-1]+0.1, np.log(ntk_4d_loss[-1])+0.1))
plt.plot(x, np.log(ntk_5d_loss), label='NTK 5d manifold')
plt.annotate("Slope: %.2f" % k3, xy=(x[-1], np.log(ntk_5d_loss[-1])), xytext=(x[-1]+0.1, np.log(ntk_5d_loss[-1])+0.1))
plt.plot(x, np.log(ntk_10d_loss), label='NTK 10d manifold')
plt.annotate("Slope: %.2f" % k4, xy=(x[-1], np.log(ntk_10d_loss[-1])), xytext=(x[-1]+0.1, np.log(ntk_10d_loss[-1])+0.1))
plt.plot(x, np.log(ntk_20d_loss), label='NTK 20d manifold')
plt.annotate("Slope: %.2f" % k5, xy=(x[-1], np.log(ntk_20d_loss[-1])), xytext=(x[-1]+0.1, np.log(ntk_20d_loss[-1])+0.1))
plt.xlabel('#sample')
plt.ylabel('log(test loss)')
plt.legend()
plt.grid()
plt.show()